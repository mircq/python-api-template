services:
  api:
    build:
      context: .
      dockerfile: ./docker/dockerfile
    container_name: api
    hostname: api
    networks:
      - template-network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      embedder-downloader:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - LOG_LEVEL=info
      - RELATIONAL_DB_TYPE=postgresql+asyncpg
      - RELATIONAL_DB_HOST=postgres
      - RELATIONAL_DB_PORT=5432
      - RELATIONAL_DB_USER=postgres
      - RELATIONAL_DB_PASSWORD=postgres_password
      - RELATIONAL_DB_NAME=template
      - NOSQL_DB_HOST=mongodb
      - NOSQL_DB_PORT=27017
      - NOSQL_DB_USER=mongodb
      - NOSQL_DB_PASSWORD=mongodb
      - NOSQL_DB_NAME=template
      - VECTOR_DB_HOST=http://qdrant
      - VECTOR_DB_PORT=6333
      - VECTOR_DB_APIKEY=qdrant_api_key
      - VECTOR_DB_COLLECTION_NAME=template
      - REDIS_DB_USER=default
      - REDIS_DB_PASSWORD=redis_password
      - REDIS_DB_HOST=redis
      - REDIS_DB_NAME=0
      - REDIS_DB_PORT=6379
      - GRAPH_DB_HOST=neo4j
      - GRAPH_DB_PORT=7474
      - GRAPH_DB_USER=neo4j
      - GRAPH_DB_PASSWORD=neo4_password
      - EMBEDDER_HOST=http://llm
      - EMBEDDER_PORT=11434
      - EMBEDDER_NAME=mxbai-embed-large
  postgres:
    image: postgres:17
    hostname: postgres
    container_name: postgres
    networks:
      - template-network
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./postgres_multiple_databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_USER=postgres
      - POSTGRES_MULTIPLE_DATABASES=template, keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d template -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
  qdrant:
    image: qdrant/qdrant:v1.12.5
    hostname: qdrant
    container_name: qdrant
    networks:
      - template-network
    ports:
      - "6333:6333"
      - "6334:6334"
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - ./qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=qdrant_api_key
    healthcheck:
      test: ["CMD-SHELL", "bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
  mongodb:
    image: mongo:6-jammy
    hostname: mongodb
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongodb
      - MONGO_INITDB_ROOT_PASSWORD=mongodb
      - MONGO_INITDB_DATABASE=template
    ports:
      - '27017:27017'
    volumes:
      - ./mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 3
  embedder:
    image: ollama/ollama:0.5.1
    hostname: embedder
    container_name: embedder
    environment:
      - OLLAMA_KEEP_ALIVE=-1 # this will keep the model in memory for the entire time
    networks:
      - template-network
    ports:
      - "11434:11434"
    volumes:
      - ./ollama_embedder_data:/root/.ollama
# to use GPU decomment the following lines
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: all
#              capabilities: [gpu]
    healthcheck:
      test: "ollama list || exit 1"
      interval: 5s
      timeout: 20s
      retries: 2
      start_period: 10s
  embedder-downloader:
    image: curlimages/curl:8.11.0
    container_name: embedder-downloader
    networks:
      - template-network
    command: >
      http://embedder:11434/api/pull -d '{"name": "mxbai-embed-large"}'
    depends_on:
      embedder:
        condition: service_healthy
  neo4j:
    image: neo4j:5.26
    hostname: neo4j
    container_name: neo4j
    networks:
      - template-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    volumes:
      - ./neo4j_data/logs:/logs
      - ./neo4j_data/config:/config
      - ./neo4j_data/data:/data
      - ./neo4j_data/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/neo4j_password
    ports:
      - "7474:7474"
      - "7687:7687"
  redis:
    image: redis:6.2
    hostname: redis
    container_name: redis
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass redis_password
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - ./redis_data:/data
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak
    hostname: keycloak
    networks:
      - template-network
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:postgres_password@postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"

networks:
  template-network:
    driver: bridge
    name: template-network